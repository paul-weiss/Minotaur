<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="341.00"> </text><svg id="frames" x="10" width="1180" total_samples="5053"><g><title>0x240ca1cc0fc19dc6 (163 samples, 3.23%)</title><rect x="0.0000%" y="293" width="3.2258%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="163"/><text x="0.2500%" y="303.50">0x2..</text></g><g><title>Minotaur`GFp_sha256_block_data_order_avx (163 samples, 3.23%)</title><rect x="0.0000%" y="277" width="3.2258%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="163"/><text x="0.2500%" y="287.50">Min..</text></g><g><title>0x34b0bcb52748774c (296 samples, 5.86%)</title><rect x="3.2258%" y="293" width="5.8579%" height="15" fill="rgb(221,193,54)" fg:x="163" fg:w="296"/><text x="3.4758%" y="303.50">0x34b0b..</text></g><g><title>Minotaur`GFp_sha256_block_data_order_avx (296 samples, 5.86%)</title><rect x="3.2258%" y="277" width="5.8579%" height="15" fill="rgb(248,212,6)" fg:x="163" fg:w="296"/><text x="3.4758%" y="287.50">Minotau..</text></g><g><title>0x53380d134d2c6dfc (160 samples, 3.17%)</title><rect x="9.0837%" y="293" width="3.1664%" height="15" fill="rgb(208,68,35)" fg:x="459" fg:w="160"/><text x="9.3337%" y="303.50">0x5..</text></g><g><title>Minotaur`GFp_sha256_block_data_order_avx (160 samples, 3.17%)</title><rect x="9.0837%" y="277" width="3.1664%" height="15" fill="rgb(232,128,0)" fg:x="459" fg:w="160"/><text x="9.3337%" y="287.50">Min..</text></g><g><title>0xe9b5dba5b5c0fbcf (5 samples, 0.10%)</title><rect x="12.2501%" y="293" width="0.0990%" height="15" fill="rgb(207,160,47)" fg:x="619" fg:w="5"/><text x="12.5001%" y="303.50"></text></g><g><title>Minotaur`GFp_sha256_block_data_order_avx (5 samples, 0.10%)</title><rect x="12.2501%" y="277" width="0.0990%" height="15" fill="rgb(228,23,34)" fg:x="619" fg:w="5"/><text x="12.5001%" y="287.50"></text></g><g><title>Minotaur`DYLD-STUB$$pthread_mutex_unlock (1 samples, 0.02%)</title><rect x="12.3491%" y="213" width="0.0198%" height="15" fill="rgb(218,30,26)" fg:x="624" fg:w="1"/><text x="12.5991%" y="223.50"></text></g><g><title>Minotaur`Minotaur::blockchain::Blockchain::get_pow_difficulty (1 samples, 0.02%)</title><rect x="12.3689%" y="213" width="0.0198%" height="15" fill="rgb(220,122,19)" fg:x="625" fg:w="1"/><text x="12.6189%" y="223.50"></text></g><g><title>Minotaur`&lt;Minotaur::block::Header as Minotaur::crypto::hash::Hashable&gt;::hash (1 samples, 0.02%)</title><rect x="13.0022%" y="197" width="0.0198%" height="15" fill="rgb(250,228,42)" fg:x="657" fg:w="1"/><text x="13.2522%" y="207.50"></text></g><g><title>Minotaur`ring::digest::digest (1 samples, 0.02%)</title><rect x="13.0022%" y="181" width="0.0198%" height="15" fill="rgb(240,193,28)" fg:x="657" fg:w="1"/><text x="13.2522%" y="191.50"></text></g><g><title>Minotaur`ring::digest::Context::update (1 samples, 0.02%)</title><rect x="13.0022%" y="165" width="0.0198%" height="15" fill="rgb(216,20,37)" fg:x="657" fg:w="1"/><text x="13.2522%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (4 samples, 0.08%)</title><rect x="17.4352%" y="149" width="0.0792%" height="15" fill="rgb(206,188,39)" fg:x="881" fg:w="4"/><text x="17.6852%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.06%)</title><rect x="17.5143%" y="149" width="0.0594%" height="15" fill="rgb(217,207,13)" fg:x="885" fg:w="3"/><text x="17.7643%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (131 samples, 2.59%)</title><rect x="31.8821%" y="133" width="2.5925%" height="15" fill="rgb(231,73,38)" fg:x="1611" fg:w="131"/><text x="32.1321%" y="143.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (5 samples, 0.10%)</title><rect x="34.4746%" y="133" width="0.0990%" height="15" fill="rgb(225,20,46)" fg:x="1742" fg:w="5"/><text x="34.7246%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1,338 samples, 26.48%)</title><rect x="16.3071%" y="165" width="26.4793%" height="15" fill="rgb(210,31,41)" fg:x="824" fg:w="1338"/><text x="16.5571%" y="175.50">libsystem_malloc.dylib`szone_malloc_should..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1,274 samples, 25.21%)</title><rect x="17.5737%" y="149" width="25.2127%" height="15" fill="rgb(221,200,47)" fg:x="888" fg:w="1274"/><text x="17.8237%" y="159.50">libsystem_malloc.dylib`tiny_malloc_shoul..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (415 samples, 8.21%)</title><rect x="34.5735%" y="133" width="8.2129%" height="15" fill="rgb(226,26,5)" fg:x="1747" fg:w="415"/><text x="34.8235%" y="143.50">libsystem_m..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (116 samples, 2.30%)</title><rect x="40.4908%" y="117" width="2.2957%" height="15" fill="rgb(249,33,26)" fg:x="2046" fg:w="116"/><text x="40.7408%" y="127.50">l..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,420 samples, 28.10%)</title><rect x="14.7239%" y="181" width="28.1021%" height="15" fill="rgb(235,183,28)" fg:x="744" fg:w="1420"/><text x="14.9739%" y="191.50">libsystem_malloc.dylib`_malloc_zone_malloc</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.04%)</title><rect x="42.7865%" y="165" width="0.0396%" height="15" fill="rgb(221,5,38)" fg:x="2162" fg:w="2"/><text x="43.0365%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (22 samples, 0.44%)</title><rect x="42.8260%" y="181" width="0.4354%" height="15" fill="rgb(247,18,42)" fg:x="2164" fg:w="22"/><text x="43.0760%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (16 samples, 0.32%)</title><rect x="43.2614%" y="181" width="0.3166%" height="15" fill="rgb(241,131,45)" fg:x="2186" fg:w="16"/><text x="43.5114%" y="191.50"></text></g><g><title>Minotaur`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,609 samples, 31.84%)</title><rect x="13.0220%" y="197" width="31.8425%" height="15" fill="rgb(249,31,29)" fg:x="658" fg:w="1609"/><text x="13.2720%" y="207.50">Minotaur`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clon..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (65 samples, 1.29%)</title><rect x="43.5781%" y="181" width="1.2864%" height="15" fill="rgb(225,111,53)" fg:x="2202" fg:w="65"/><text x="43.8281%" y="191.50"></text></g><g><title>Minotaur`DYLD-STUB$$memcpy (2 samples, 0.04%)</title><rect x="44.8644%" y="197" width="0.0396%" height="15" fill="rgb(238,160,17)" fg:x="2267" fg:w="2"/><text x="45.1144%" y="207.50"></text></g><g><title>Minotaur`core::option::Option&lt;T&gt;::ok_or (2 samples, 0.04%)</title><rect x="45.5571%" y="117" width="0.0396%" height="15" fill="rgb(214,148,48)" fg:x="2302" fg:w="2"/><text x="45.8071%" y="127.50"></text></g><g><title>Minotaur`Minotaur::transaction::_IMPL_SERIALIZE_FOR_SignedTransaction::_&lt;impl serde::ser::Serialize for Minotaur::transaction::SignedTransaction&gt;::serialize (60 samples, 1.19%)</title><rect x="45.1811%" y="133" width="1.1874%" height="15" fill="rgb(232,36,49)" fg:x="2283" fg:w="60"/><text x="45.4311%" y="143.50"></text></g><g><title>Minotaur`serde::ser::Serializer::collect_seq (39 samples, 0.77%)</title><rect x="45.5967%" y="117" width="0.7718%" height="15" fill="rgb(209,103,24)" fg:x="2304" fg:w="39"/><text x="45.8467%" y="127.50"></text></g><g><title>Minotaur`core::option::Option&lt;T&gt;::ok_or (1 samples, 0.02%)</title><rect x="46.3685%" y="133" width="0.0198%" height="15" fill="rgb(229,88,8)" fg:x="2343" fg:w="1"/><text x="46.6185%" y="143.50"></text></g><g><title>Minotaur`serde::ser::Serializer::collect_seq (66 samples, 1.31%)</title><rect x="46.3883%" y="133" width="1.3062%" height="15" fill="rgb(213,181,19)" fg:x="2344" fg:w="66"/><text x="46.6383%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (33 samples, 0.65%)</title><rect x="47.6944%" y="133" width="0.6531%" height="15" fill="rgb(254,191,54)" fg:x="2410" fg:w="33"/><text x="47.9444%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (33 samples, 0.65%)</title><rect x="47.6944%" y="117" width="0.6531%" height="15" fill="rgb(241,83,37)" fg:x="2410" fg:w="33"/><text x="47.9444%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (31 samples, 0.61%)</title><rect x="47.7340%" y="101" width="0.6135%" height="15" fill="rgb(233,36,39)" fg:x="2412" fg:w="31"/><text x="47.9840%" y="111.50"></text></g><g><title>Minotaur`bincode::internal::serialize (165 samples, 3.27%)</title><rect x="45.1019%" y="149" width="3.2654%" height="15" fill="rgb(226,3,54)" fg:x="2279" fg:w="165"/><text x="45.3519%" y="159.50">Min..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="48.3475%" y="133" width="0.0198%" height="15" fill="rgb(245,192,40)" fg:x="2443" fg:w="1"/><text x="48.5975%" y="143.50"></text></g><g><title>Minotaur`GFp_sha256_block_data_order_avx (7 samples, 0.14%)</title><rect x="48.6048%" y="133" width="0.1385%" height="15" fill="rgb(238,167,29)" fg:x="2456" fg:w="7"/><text x="48.8548%" y="143.50"></text></g><g><title>Minotaur`ring::digest::sha256_format_output (6 samples, 0.12%)</title><rect x="49.0006%" y="117" width="0.1187%" height="15" fill="rgb(232,182,51)" fg:x="2476" fg:w="6"/><text x="49.2506%" y="127.50"></text></g><g><title>Minotaur`ring::digest::BlockContext::finish (23 samples, 0.46%)</title><rect x="48.7433%" y="133" width="0.4552%" height="15" fill="rgb(231,60,39)" fg:x="2463" fg:w="23"/><text x="48.9933%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (4 samples, 0.08%)</title><rect x="49.1193%" y="117" width="0.0792%" height="15" fill="rgb(208,69,12)" fg:x="2482" fg:w="4"/><text x="49.3693%" y="127.50"></text></g><g><title>Minotaur`ring::digest::Context::update (26 samples, 0.51%)</title><rect x="49.1985%" y="133" width="0.5145%" height="15" fill="rgb(235,93,37)" fg:x="2486" fg:w="26"/><text x="49.4485%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="49.6735%" y="117" width="0.0396%" height="15" fill="rgb(213,116,39)" fg:x="2510" fg:w="2"/><text x="49.9235%" y="127.50"></text></g><g><title>Minotaur`ring::digest::digest (75 samples, 1.48%)</title><rect x="48.3673%" y="149" width="1.4843%" height="15" fill="rgb(222,207,29)" fg:x="2444" fg:w="75"/><text x="48.6173%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (7 samples, 0.14%)</title><rect x="49.7130%" y="133" width="0.1385%" height="15" fill="rgb(206,96,30)" fg:x="2512" fg:w="7"/><text x="49.9630%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (4 samples, 0.08%)</title><rect x="49.8912%" y="133" width="0.0792%" height="15" fill="rgb(218,138,4)" fg:x="2521" fg:w="4"/><text x="50.1412%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (4 samples, 0.08%)</title><rect x="49.8912%" y="117" width="0.0792%" height="15" fill="rgb(250,191,14)" fg:x="2521" fg:w="4"/><text x="50.1412%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.16%)</title><rect x="49.8516%" y="149" width="0.1583%" height="15" fill="rgb(239,60,40)" fg:x="2519" fg:w="8"/><text x="50.1016%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.04%)</title><rect x="49.9703%" y="133" width="0.0396%" height="15" fill="rgb(206,27,48)" fg:x="2525" fg:w="2"/><text x="50.2203%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (8 samples, 0.16%)</title><rect x="50.0099%" y="149" width="0.1583%" height="15" fill="rgb(225,35,8)" fg:x="2527" fg:w="8"/><text x="50.2599%" y="159.50"></text></g><g><title>Minotaur`&lt;Minotaur::transaction::SignedTransaction as Minotaur::crypto::hash::Hashable&gt;::hash (258 samples, 5.11%)</title><rect x="45.0821%" y="165" width="5.1059%" height="15" fill="rgb(250,213,24)" fg:x="2278" fg:w="258"/><text x="45.3321%" y="175.50">Minota..</text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="50.1682%" y="149" width="0.0198%" height="15" fill="rgb(247,123,22)" fg:x="2535" fg:w="1"/><text x="50.4182%" y="159.50"></text></g><g><title>Minotaur`GFp_sha256_block_data_order (2 samples, 0.04%)</title><rect x="50.4849%" y="133" width="0.0396%" height="15" fill="rgb(231,138,38)" fg:x="2551" fg:w="2"/><text x="50.7349%" y="143.50"></text></g><g><title>Minotaur`GFp_sha256_block_data_order_avx (3 samples, 0.06%)</title><rect x="50.5244%" y="133" width="0.0594%" height="15" fill="rgb(231,145,46)" fg:x="2553" fg:w="3"/><text x="50.7744%" y="143.50"></text></g><g><title>Minotaur`ring::digest::sha256_format_output (4 samples, 0.08%)</title><rect x="50.7817%" y="117" width="0.0792%" height="15" fill="rgb(251,118,11)" fg:x="2566" fg:w="4"/><text x="51.0317%" y="127.50"></text></g><g><title>Minotaur`ring::digest::BlockContext::finish (17 samples, 0.34%)</title><rect x="50.5838%" y="133" width="0.3364%" height="15" fill="rgb(217,147,25)" fg:x="2556" fg:w="17"/><text x="50.8338%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (3 samples, 0.06%)</title><rect x="50.8609%" y="117" width="0.0594%" height="15" fill="rgb(247,81,37)" fg:x="2570" fg:w="3"/><text x="51.1109%" y="127.50"></text></g><g><title>Minotaur`ring::digest::Context::update (10 samples, 0.20%)</title><rect x="50.9202%" y="133" width="0.1979%" height="15" fill="rgb(209,12,38)" fg:x="2573" fg:w="10"/><text x="51.1702%" y="143.50"></text></g><g><title>Minotaur`ring::digest::digest (48 samples, 0.95%)</title><rect x="50.2276%" y="149" width="0.9499%" height="15" fill="rgb(227,1,9)" fg:x="2538" fg:w="48"/><text x="50.4776%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (3 samples, 0.06%)</title><rect x="51.1181%" y="133" width="0.0594%" height="15" fill="rgb(248,47,43)" fg:x="2583" fg:w="3"/><text x="51.3681%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (27 samples, 0.53%)</title><rect x="51.1775%" y="149" width="0.5343%" height="15" fill="rgb(221,10,30)" fg:x="2586" fg:w="27"/><text x="51.4275%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (25 samples, 0.49%)</title><rect x="51.2171%" y="133" width="0.4948%" height="15" fill="rgb(210,229,1)" fg:x="2588" fg:w="25"/><text x="51.4671%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (23 samples, 0.46%)</title><rect x="51.2567%" y="117" width="0.4552%" height="15" fill="rgb(222,148,37)" fg:x="2590" fg:w="23"/><text x="51.5067%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="51.6921%" y="101" width="0.0198%" height="15" fill="rgb(234,67,33)" fg:x="2612" fg:w="1"/><text x="51.9421%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.02%)</title><rect x="51.6921%" y="85" width="0.0198%" height="15" fill="rgb(247,98,35)" fg:x="2612" fg:w="1"/><text x="51.9421%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free (11 samples, 0.22%)</title><rect x="51.7119%" y="149" width="0.2177%" height="15" fill="rgb(247,138,52)" fg:x="2613" fg:w="11"/><text x="51.9619%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (7 samples, 0.14%)</title><rect x="51.7910%" y="133" width="0.1385%" height="15" fill="rgb(213,79,30)" fg:x="2617" fg:w="7"/><text x="52.0410%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (6 samples, 0.12%)</title><rect x="51.8108%" y="117" width="0.1187%" height="15" fill="rgb(246,177,23)" fg:x="2618" fg:w="6"/><text x="52.0608%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (15 samples, 0.30%)</title><rect x="51.9295%" y="149" width="0.2969%" height="15" fill="rgb(230,62,27)" fg:x="2624" fg:w="15"/><text x="52.1795%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="52.2264%" y="149" width="0.0198%" height="15" fill="rgb(216,154,8)" fg:x="2639" fg:w="1"/><text x="52.4764%" y="159.50"></text></g><g><title>Minotaur`Minotaur::crypto::merkle::add_hash (105 samples, 2.08%)</title><rect x="50.1880%" y="165" width="2.0780%" height="15" fill="rgb(244,35,45)" fg:x="2536" fg:w="105"/><text x="50.4380%" y="175.50">M..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="52.2462%" y="149" width="0.0198%" height="15" fill="rgb(251,115,12)" fg:x="2640" fg:w="1"/><text x="52.4962%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="52.3056%" y="133" width="0.0198%" height="15" fill="rgb(240,54,50)" fg:x="2643" fg:w="1"/><text x="52.5556%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="52.3056%" y="117" width="0.0198%" height="15" fill="rgb(233,84,52)" fg:x="2643" fg:w="1"/><text x="52.5556%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="52.3056%" y="101" width="0.0198%" height="15" fill="rgb(207,117,47)" fg:x="2643" fg:w="1"/><text x="52.5556%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="52.3056%" y="85" width="0.0198%" height="15" fill="rgb(249,43,39)" fg:x="2643" fg:w="1"/><text x="52.5556%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_small (2 samples, 0.04%)</title><rect x="52.3451%" y="85" width="0.0396%" height="15" fill="rgb(209,38,44)" fg:x="2645" fg:w="2"/><text x="52.5951%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.02%)</title><rect x="52.3649%" y="69" width="0.0198%" height="15" fill="rgb(236,212,23)" fg:x="2646" fg:w="1"/><text x="52.6149%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.02%)</title><rect x="52.3847%" y="85" width="0.0198%" height="15" fill="rgb(242,79,21)" fg:x="2647" fg:w="1"/><text x="52.6347%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (1 samples, 0.02%)</title><rect x="52.4045%" y="85" width="0.0198%" height="15" fill="rgb(211,96,35)" fg:x="2648" fg:w="1"/><text x="52.6545%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (2 samples, 0.04%)</title><rect x="52.4441%" y="37" width="0.0396%" height="15" fill="rgb(253,215,40)" fg:x="2650" fg:w="2"/><text x="52.6941%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (1 samples, 0.02%)</title><rect x="52.4837%" y="37" width="0.0198%" height="15" fill="rgb(211,81,21)" fg:x="2652" fg:w="1"/><text x="52.7337%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (5 samples, 0.10%)</title><rect x="52.4243%" y="69" width="0.0990%" height="15" fill="rgb(208,190,38)" fg:x="2649" fg:w="5"/><text x="52.6743%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (5 samples, 0.10%)</title><rect x="52.4243%" y="53" width="0.0990%" height="15" fill="rgb(235,213,38)" fg:x="2649" fg:w="5"/><text x="52.6743%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.02%)</title><rect x="52.5035%" y="37" width="0.0198%" height="15" fill="rgb(237,122,38)" fg:x="2653" fg:w="1"/><text x="52.7535%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.14%)</title><rect x="52.4243%" y="85" width="0.1385%" height="15" fill="rgb(244,218,35)" fg:x="2649" fg:w="7"/><text x="52.6743%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.04%)</title><rect x="52.5233%" y="69" width="0.0396%" height="15" fill="rgb(240,68,47)" fg:x="2654" fg:w="2"/><text x="52.7733%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="52.5430%" y="53" width="0.0198%" height="15" fill="rgb(210,16,53)" fg:x="2655" fg:w="1"/><text x="52.7930%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (3 samples, 0.06%)</title><rect x="52.5628%" y="85" width="0.0594%" height="15" fill="rgb(235,124,12)" fg:x="2656" fg:w="3"/><text x="52.8128%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.04%)</title><rect x="52.5826%" y="69" width="0.0396%" height="15" fill="rgb(224,169,11)" fg:x="2657" fg:w="2"/><text x="52.8326%" y="79.50"></text></g><g><title>Minotaur`alloc::raw_vec::finish_grow (17 samples, 0.34%)</title><rect x="52.3056%" y="149" width="0.3364%" height="15" fill="rgb(250,166,2)" fg:x="2643" fg:w="17"/><text x="52.5556%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (16 samples, 0.32%)</title><rect x="52.3254%" y="133" width="0.3166%" height="15" fill="rgb(242,216,29)" fg:x="2644" fg:w="16"/><text x="52.5754%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (15 samples, 0.30%)</title><rect x="52.3451%" y="117" width="0.2969%" height="15" fill="rgb(230,116,27)" fg:x="2645" fg:w="15"/><text x="52.5951%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (15 samples, 0.30%)</title><rect x="52.3451%" y="101" width="0.2969%" height="15" fill="rgb(228,99,48)" fg:x="2645" fg:w="15"/><text x="52.5951%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="52.6222%" y="85" width="0.0198%" height="15" fill="rgb(253,11,6)" fg:x="2659" fg:w="1"/><text x="52.8722%" y="95.50"></text></g><g><title>Minotaur`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (20 samples, 0.40%)</title><rect x="52.2660%" y="165" width="0.3958%" height="15" fill="rgb(247,143,39)" fg:x="2641" fg:w="20"/><text x="52.5160%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.02%)</title><rect x="52.6420%" y="149" width="0.0198%" height="15" fill="rgb(236,97,10)" fg:x="2660" fg:w="1"/><text x="52.8920%" y="159.50"></text></g><g><title>Minotaur`ring::digest::digest (1 samples, 0.02%)</title><rect x="52.6618%" y="165" width="0.0198%" height="15" fill="rgb(233,208,19)" fg:x="2661" fg:w="1"/><text x="52.9118%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="52.6816%" y="165" width="0.0198%" height="15" fill="rgb(216,164,2)" fg:x="2662" fg:w="1"/><text x="52.9316%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="52.6816%" y="149" width="0.0198%" height="15" fill="rgb(220,129,5)" fg:x="2662" fg:w="1"/><text x="52.9316%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="52.6816%" y="133" width="0.0198%" height="15" fill="rgb(242,17,10)" fg:x="2662" fg:w="1"/><text x="52.9316%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="52.6816%" y="117" width="0.0198%" height="15" fill="rgb(242,107,0)" fg:x="2662" fg:w="1"/><text x="52.9316%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.06%)</title><rect x="52.7014%" y="165" width="0.0594%" height="15" fill="rgb(251,28,31)" fg:x="2663" fg:w="3"/><text x="52.9514%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="52.7409%" y="149" width="0.0198%" height="15" fill="rgb(233,223,10)" fg:x="2665" fg:w="1"/><text x="52.9909%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.02%)</title><rect x="52.7409%" y="133" width="0.0198%" height="15" fill="rgb(215,21,27)" fg:x="2665" fg:w="1"/><text x="52.9909%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (3 samples, 0.06%)</title><rect x="52.7607%" y="165" width="0.0594%" height="15" fill="rgb(232,23,21)" fg:x="2666" fg:w="3"/><text x="53.0107%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.02%)</title><rect x="52.8003%" y="149" width="0.0198%" height="15" fill="rgb(244,5,23)" fg:x="2668" fg:w="1"/><text x="53.0503%" y="159.50"></text></g><g><title>Minotaur`Minotaur::crypto::merkle::MerkleTree::new (403 samples, 7.98%)</title><rect x="44.9040%" y="181" width="7.9755%" height="15" fill="rgb(226,81,46)" fg:x="2269" fg:w="403"/><text x="45.1540%" y="191.50">Minotaur`Mi..</text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (3 samples, 0.06%)</title><rect x="52.8201%" y="165" width="0.0594%" height="15" fill="rgb(247,70,30)" fg:x="2669" fg:w="3"/><text x="53.0701%" y="175.50"></text></g><g><title>Minotaur`__rdl_alloc (1 samples, 0.02%)</title><rect x="52.8795%" y="181" width="0.0198%" height="15" fill="rgb(212,68,19)" fg:x="2672" fg:w="1"/><text x="53.1295%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (6 samples, 0.12%)</title><rect x="54.0075%" y="117" width="0.1187%" height="15" fill="rgb(240,187,13)" fg:x="2729" fg:w="6"/><text x="54.2575%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (80 samples, 1.58%)</title><rect x="52.9784%" y="149" width="1.5832%" height="15" fill="rgb(223,113,26)" fg:x="2677" fg:w="80"/><text x="53.2284%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (78 samples, 1.54%)</title><rect x="53.0180%" y="133" width="1.5436%" height="15" fill="rgb(206,192,2)" fg:x="2679" fg:w="78"/><text x="53.2680%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (22 samples, 0.44%)</title><rect x="54.1263%" y="117" width="0.4354%" height="15" fill="rgb(241,108,4)" fg:x="2735" fg:w="22"/><text x="54.3763%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.06%)</title><rect x="54.5023%" y="101" width="0.0594%" height="15" fill="rgb(247,173,49)" fg:x="2754" fg:w="3"/><text x="54.7523%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (82 samples, 1.62%)</title><rect x="52.9586%" y="165" width="1.6228%" height="15" fill="rgb(224,114,35)" fg:x="2676" fg:w="82"/><text x="53.2086%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="54.5616%" y="149" width="0.0198%" height="15" fill="rgb(245,159,27)" fg:x="2757" fg:w="1"/><text x="54.8116%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.04%)</title><rect x="54.5814%" y="165" width="0.0396%" height="15" fill="rgb(245,172,44)" fg:x="2758" fg:w="2"/><text x="54.8314%" y="175.50"></text></g><g><title>Minotaur`alloc::slice::_&lt;impl [T]&gt;::to_vec (91 samples, 1.80%)</title><rect x="52.8993%" y="181" width="1.8009%" height="15" fill="rgb(236,23,11)" fg:x="2673" fg:w="91"/><text x="53.1493%" y="191.50">M..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (4 samples, 0.08%)</title><rect x="54.6210%" y="165" width="0.0792%" height="15" fill="rgb(205,117,38)" fg:x="2760" fg:w="4"/><text x="54.8710%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.02%)</title><rect x="54.7002%" y="181" width="0.0198%" height="15" fill="rgb(237,72,25)" fg:x="2764" fg:w="1"/><text x="54.9502%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.02%)</title><rect x="54.7002%" y="165" width="0.0198%" height="15" fill="rgb(244,70,9)" fg:x="2764" fg:w="1"/><text x="54.9502%" y="175.50"></text></g><g><title>Minotaur`Minotaur::block::generate_pow_block (497 samples, 9.84%)</title><rect x="44.9040%" y="197" width="9.8357%" height="15" fill="rgb(217,125,39)" fg:x="2269" fg:w="497"/><text x="45.1540%" y="207.50">Minotaur`Minot..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="54.7200%" y="181" width="0.0198%" height="15" fill="rgb(235,36,10)" fg:x="2765" fg:w="1"/><text x="54.9700%" y="191.50"></text></g><g><title>Minotaur`hashbrown::map::make_hash (70 samples, 1.39%)</title><rect x="54.9377%" y="181" width="1.3853%" height="15" fill="rgb(251,123,47)" fg:x="2776" fg:w="70"/><text x="55.1877%" y="191.50"></text></g><g><title>Minotaur`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="56.3032%" y="165" width="0.0198%" height="15" fill="rgb(221,13,13)" fg:x="2845" fg:w="1"/><text x="56.5532%" y="175.50"></text></g><g><title>Minotaur`Minotaur::blockchain::Blockchain::find_one_block (89 samples, 1.76%)</title><rect x="54.7398%" y="197" width="1.7613%" height="15" fill="rgb(238,131,9)" fg:x="2766" fg:w="89"/><text x="54.9898%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (9 samples, 0.18%)</title><rect x="56.3230%" y="181" width="0.1781%" height="15" fill="rgb(211,50,8)" fg:x="2846" fg:w="9"/><text x="56.5730%" y="191.50"></text></g><g><title>Minotaur`__udivti3 (2 samples, 0.04%)</title><rect x="56.6000%" y="181" width="0.0396%" height="15" fill="rgb(245,182,24)" fg:x="2860" fg:w="2"/><text x="56.8500%" y="191.50"></text></g><g><title>Minotaur`Minotaur::blockchain::Blockchain::get_pow_difficulty (11 samples, 0.22%)</title><rect x="56.5011%" y="197" width="0.2177%" height="15" fill="rgb(242,14,37)" fg:x="2855" fg:w="11"/><text x="56.7511%" y="207.50"></text></g><g><title>Minotaur`hashbrown::map::make_hash (4 samples, 0.08%)</title><rect x="56.6396%" y="181" width="0.0792%" height="15" fill="rgb(246,228,12)" fg:x="2862" fg:w="4"/><text x="56.8896%" y="191.50"></text></g><g><title>Minotaur`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.06%)</title><rect x="56.6594%" y="165" width="0.0594%" height="15" fill="rgb(213,55,15)" fg:x="2863" fg:w="3"/><text x="56.9094%" y="175.50"></text></g><g><title>Minotaur`__rdl_alloc (19 samples, 0.38%)</title><rect x="56.7188%" y="197" width="0.3760%" height="15" fill="rgb(209,9,3)" fg:x="2866" fg:w="19"/><text x="56.9688%" y="207.50"></text></g><g><title>Minotaur`__rust_alloc (4 samples, 0.08%)</title><rect x="57.0948%" y="197" width="0.0792%" height="15" fill="rgb(230,59,30)" fg:x="2885" fg:w="4"/><text x="57.3448%" y="207.50"></text></g><g><title>Minotaur`crossbeam_channel::channel::Receiver&lt;T&gt;::try_recv (4 samples, 0.08%)</title><rect x="57.1740%" y="197" width="0.0792%" height="15" fill="rgb(209,121,21)" fg:x="2889" fg:w="4"/><text x="57.4240%" y="207.50"></text></g><g><title>Minotaur`crossbeam_channel::flavors::list::Channel&lt;T&gt;::start_recv (2 samples, 0.04%)</title><rect x="57.2135%" y="181" width="0.0396%" height="15" fill="rgb(220,109,13)" fg:x="2891" fg:w="2"/><text x="57.4635%" y="191.50"></text></g><g><title>Minotaur`hashbrown::map::make_hash (4 samples, 0.08%)</title><rect x="57.2531%" y="197" width="0.0792%" height="15" fill="rgb(232,18,1)" fg:x="2893" fg:w="4"/><text x="57.5031%" y="207.50"></text></g><g><title>Minotaur`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.04%)</title><rect x="57.2927%" y="181" width="0.0396%" height="15" fill="rgb(215,41,42)" fg:x="2895" fg:w="2"/><text x="57.5427%" y="191.50"></text></g><g><title>Minotaur`rand::rngs::thread::thread_rng (1 samples, 0.02%)</title><rect x="57.3323%" y="197" width="0.0198%" height="15" fill="rgb(224,123,36)" fg:x="2897" fg:w="1"/><text x="57.5823%" y="207.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__error (1 samples, 0.02%)</title><rect x="57.3719%" y="181" width="0.0198%" height="15" fill="rgb(240,125,3)" fg:x="2899" fg:w="1"/><text x="57.6219%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`cerror_nocancel (1 samples, 0.02%)</title><rect x="57.5302%" y="165" width="0.0198%" height="15" fill="rgb(205,98,50)" fg:x="2907" fg:w="1"/><text x="57.7802%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg (3 samples, 0.06%)</title><rect x="57.5698%" y="149" width="0.0594%" height="15" fill="rgb(205,185,37)" fg:x="2909" fg:w="3"/><text x="57.8198%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`clock_get_time (163 samples, 3.23%)</title><rect x="57.5500%" y="165" width="3.2258%" height="15" fill="rgb(238,207,15)" fg:x="2908" fg:w="163"/><text x="57.8000%" y="175.50">lib..</text></g><g><title>libsystem_kernel.dylib`mach_msg_trap (159 samples, 3.15%)</title><rect x="57.6291%" y="149" width="3.1466%" height="15" fill="rgb(213,199,42)" fg:x="2912" fg:w="159"/><text x="57.8791%" y="159.50">lib..</text></g><g><title>libsystem_c.dylib`nanosleep (172 samples, 3.40%)</title><rect x="57.3916%" y="181" width="3.4039%" height="15" fill="rgb(235,201,11)" fg:x="2900" fg:w="172"/><text x="57.6416%" y="191.50">lib..</text></g><g><title>libsystem_pthread.dylib`_pthread_exit_if_canceled (1 samples, 0.02%)</title><rect x="60.7758%" y="165" width="0.0198%" height="15" fill="rgb(207,46,11)" fg:x="3071" fg:w="1"/><text x="61.0258%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__semwait_signal (124 samples, 2.45%)</title><rect x="60.7956%" y="181" width="2.4540%" height="15" fill="rgb(241,35,35)" fg:x="3072" fg:w="124"/><text x="61.0456%" y="191.50">li..</text></g><g><title>Minotaur`std::thread::sleep (299 samples, 5.92%)</title><rect x="57.3521%" y="197" width="5.9173%" height="15" fill="rgb(243,32,47)" fg:x="2898" fg:w="299"/><text x="57.6021%" y="207.50">Minotaur..</text></g><g><title>libsystem_kernel.dylib`clock_get_time (1 samples, 0.02%)</title><rect x="63.2496%" y="181" width="0.0198%" height="15" fill="rgb(247,202,23)" fg:x="3196" fg:w="1"/><text x="63.4996%" y="191.50"></text></g><g><title>Minotaur`std::time::SystemTime::duration_since (1 samples, 0.02%)</title><rect x="63.2693%" y="197" width="0.0198%" height="15" fill="rgb(219,102,11)" fg:x="3197" fg:w="1"/><text x="63.5193%" y="207.50"></text></g><g><title>Minotaur`std::time::SystemTime::now (5 samples, 0.10%)</title><rect x="63.2891%" y="197" width="0.0990%" height="15" fill="rgb(243,110,44)" fg:x="3198" fg:w="5"/><text x="63.5391%" y="207.50"></text></g><g><title>libsystem_c.dylib`gettimeofday (5 samples, 0.10%)</title><rect x="63.2891%" y="181" width="0.0990%" height="15" fill="rgb(222,74,54)" fg:x="3198" fg:w="5"/><text x="63.5391%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__commpage_gettimeofday_internal (4 samples, 0.08%)</title><rect x="63.3089%" y="165" width="0.0792%" height="15" fill="rgb(216,99,12)" fg:x="3199" fg:w="4"/><text x="63.5589%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (4 samples, 0.08%)</title><rect x="63.3089%" y="149" width="0.0792%" height="15" fill="rgb(226,22,26)" fg:x="3199" fg:w="4"/><text x="63.5589%" y="159.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.04%)</title><rect x="63.3881%" y="197" width="0.0396%" height="15" fill="rgb(217,163,10)" fg:x="3203" fg:w="2"/><text x="63.6381%" y="207.50"></text></g><g><title>libsystem_c.dylib`gettimeofday (2 samples, 0.04%)</title><rect x="63.4277%" y="197" width="0.0396%" height="15" fill="rgb(213,25,53)" fg:x="3205" fg:w="2"/><text x="63.6777%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.12%)</title><rect x="63.4672%" y="197" width="0.1187%" height="15" fill="rgb(252,105,26)" fg:x="3207" fg:w="6"/><text x="63.7172%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_size (1 samples, 0.02%)</title><rect x="65.9014%" y="181" width="0.0198%" height="15" fill="rgb(220,39,43)" fg:x="3330" fg:w="1"/><text x="66.1514%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (187 samples, 3.70%)</title><rect x="65.9212%" y="181" width="3.7008%" height="15" fill="rgb(229,68,48)" fg:x="3331" fg:w="187"/><text x="66.1712%" y="191.50">libs..</text></g><g><title>libsystem_malloc.dylib`tiny_size (160 samples, 3.17%)</title><rect x="66.4556%" y="165" width="3.1664%" height="15" fill="rgb(252,8,32)" fg:x="3358" fg:w="160"/><text x="66.7056%" y="175.50">lib..</text></g><g><title>libsystem_malloc.dylib`free (316 samples, 6.25%)</title><rect x="63.5860%" y="197" width="6.2537%" height="15" fill="rgb(223,20,43)" fg:x="3213" fg:w="316"/><text x="63.8360%" y="207.50">libsyste..</text></g><g><title>libsystem_malloc.dylib`tiny_size (11 samples, 0.22%)</title><rect x="69.6220%" y="181" width="0.2177%" height="15" fill="rgb(229,81,49)" fg:x="3518" fg:w="11"/><text x="69.8720%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.02%)</title><rect x="69.8397%" y="197" width="0.0198%" height="15" fill="rgb(236,28,36)" fg:x="3529" fg:w="1"/><text x="70.0897%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (10 samples, 0.20%)</title><rect x="78.6463%" y="181" width="0.1979%" height="15" fill="rgb(249,185,26)" fg:x="3974" fg:w="10"/><text x="78.8963%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (5 samples, 0.10%)</title><rect x="78.8443%" y="181" width="0.0990%" height="15" fill="rgb(249,174,33)" fg:x="3984" fg:w="5"/><text x="79.0943%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (262 samples, 5.19%)</title><rect x="87.5717%" y="165" width="5.1850%" height="15" fill="rgb(233,201,37)" fg:x="4425" fg:w="262"/><text x="87.8217%" y="175.50">libsys..</text></g><g><title>libsystem_malloc.dylib`free_tiny (1,372 samples, 27.15%)</title><rect x="69.8595%" y="197" width="27.1522%" height="15" fill="rgb(221,78,26)" fg:x="3530" fg:w="1372"/><text x="70.1095%" y="207.50">libsystem_malloc.dylib`free_tiny</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (913 samples, 18.07%)</title><rect x="78.9432%" y="181" width="18.0685%" height="15" fill="rgb(250,127,30)" fg:x="3989" fg:w="913"/><text x="79.1932%" y="191.50">libsystem_malloc.dylib`tiny_..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (215 samples, 4.25%)</title><rect x="92.7568%" y="165" width="4.2549%" height="15" fill="rgb(230,49,44)" fg:x="4687" fg:w="215"/><text x="93.0068%" y="175.50">libsy..</text></g><g><title>libsystem_malloc.dylib`malloc (6 samples, 0.12%)</title><rect x="97.0117%" y="197" width="0.1187%" height="15" fill="rgb(229,67,23)" fg:x="4902" fg:w="6"/><text x="97.2617%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (13 samples, 0.26%)</title><rect x="97.1304%" y="197" width="0.2573%" height="15" fill="rgb(249,83,47)" fg:x="4908" fg:w="13"/><text x="97.3804%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (9 samples, 0.18%)</title><rect x="97.3877%" y="197" width="0.1781%" height="15" fill="rgb(215,43,3)" fg:x="4921" fg:w="9"/><text x="97.6377%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (21 samples, 0.42%)</title><rect x="97.5658%" y="197" width="0.4156%" height="15" fill="rgb(238,154,13)" fg:x="4930" fg:w="21"/><text x="97.8158%" y="207.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (8 samples, 0.16%)</title><rect x="97.9814%" y="197" width="0.1583%" height="15" fill="rgb(219,56,2)" fg:x="4951" fg:w="8"/><text x="98.2314%" y="207.50"></text></g><g><title>Minotaur`Minotaur::miner::Context::miner_loop (4,339 samples, 85.87%)</title><rect x="12.3887%" y="213" width="85.8698%" height="15" fill="rgb(233,0,4)" fg:x="626" fg:w="4339"/><text x="12.6387%" y="223.50">Minotaur`Minotaur::miner::Context::miner_loop</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (6 samples, 0.12%)</title><rect x="98.1397%" y="197" width="0.1187%" height="15" fill="rgb(235,30,7)" fg:x="4959" fg:w="6"/><text x="98.3897%" y="207.50"></text></g><g><title>Minotaur`mio::poll::Poll::poll (2 samples, 0.04%)</title><rect x="98.2585%" y="197" width="0.0396%" height="15" fill="rgb(250,79,13)" fg:x="4965" fg:w="2"/><text x="98.5085%" y="207.50"></text></g><g><title>Minotaur`mio::poll::Poll::poll1 (2 samples, 0.04%)</title><rect x="98.2585%" y="181" width="0.0396%" height="15" fill="rgb(211,146,34)" fg:x="4965" fg:w="2"/><text x="98.5085%" y="191.50"></text></g><g><title>Minotaur`mio::sys::unix::awakener::pipe::Awakener::cleanup (2 samples, 0.04%)</title><rect x="98.2585%" y="165" width="0.0396%" height="15" fill="rgb(228,22,38)" fg:x="4965" fg:w="2"/><text x="98.5085%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`read (2 samples, 0.04%)</title><rect x="98.2585%" y="149" width="0.0396%" height="15" fill="rgb(235,168,5)" fg:x="4965" fg:w="2"/><text x="98.5085%" y="159.50"></text></g><g><title>Minotaur`Minotaur::network::server::Context::listen (3 samples, 0.06%)</title><rect x="98.2585%" y="213" width="0.0594%" height="15" fill="rgb(221,155,16)" fg:x="4965" fg:w="3"/><text x="98.5085%" y="223.50"></text></g><g><title>Minotaur`mio_extras::channel::Receiver&lt;T&gt;::try_recv (1 samples, 0.02%)</title><rect x="98.2980%" y="197" width="0.0198%" height="15" fill="rgb(215,215,53)" fg:x="4967" fg:w="1"/><text x="98.5480%" y="207.50"></text></g><g><title>Minotaur`std::sync::mpsc::Receiver&lt;T&gt;::try_recv (1 samples, 0.02%)</title><rect x="98.2980%" y="181" width="0.0198%" height="15" fill="rgb(223,4,10)" fg:x="4967" fg:w="1"/><text x="98.5480%" y="191.50"></text></g><g><title>Minotaur`std::sync::mpsc::shared::Packet&lt;T&gt;::try_recv (1 samples, 0.02%)</title><rect x="98.2980%" y="165" width="0.0198%" height="15" fill="rgb(234,103,6)" fg:x="4967" fg:w="1"/><text x="98.5480%" y="175.50"></text></g><g><title>Minotaur`std::sync::mpsc::mpsc_queue::Queue&lt;T&gt;::pop (1 samples, 0.02%)</title><rect x="98.2980%" y="149" width="0.0198%" height="15" fill="rgb(227,97,0)" fg:x="4967" fg:w="1"/><text x="98.5480%" y="159.50"></text></g><g><title>Minotaur`&lt;Minotaur::transaction::SignedTransaction as Minotaur::crypto::hash::Hashable&gt;::hash (1 samples, 0.02%)</title><rect x="98.3178%" y="197" width="0.0198%" height="15" fill="rgb(234,150,53)" fg:x="4968" fg:w="1"/><text x="98.5678%" y="207.50"></text></g><g><title>Minotaur`Minotaur::transaction::generate_random_signed_transaction (1 samples, 0.02%)</title><rect x="98.3376%" y="197" width="0.0198%" height="15" fill="rgb(228,201,54)" fg:x="4969" fg:w="1"/><text x="98.5876%" y="207.50"></text></g><g><title>Minotaur`Minotaur::crypto::key_pair::random (1 samples, 0.02%)</title><rect x="98.3376%" y="181" width="0.0198%" height="15" fill="rgb(222,22,37)" fg:x="4969" fg:w="1"/><text x="98.5876%" y="191.50"></text></g><g><title>Minotaur`ring::ec::curve25519::ed25519::signing::Ed25519KeyPair::from_pkcs8 (1 samples, 0.02%)</title><rect x="98.3376%" y="165" width="0.0198%" height="15" fill="rgb(237,53,32)" fg:x="4969" fg:w="1"/><text x="98.5876%" y="175.50"></text></g><g><title>Minotaur`ring::ec::curve25519::ed25519::signing::Ed25519KeyPair::from_seed_ (1 samples, 0.02%)</title><rect x="98.3376%" y="149" width="0.0198%" height="15" fill="rgb(233,25,53)" fg:x="4969" fg:w="1"/><text x="98.5876%" y="159.50"></text></g><g><title>Minotaur`GFp_x25519_ge_scalarmult_base (1 samples, 0.02%)</title><rect x="98.3376%" y="133" width="0.0198%" height="15" fill="rgb(210,40,34)" fg:x="4969" fg:w="1"/><text x="98.5876%" y="143.50"></text></g><g><title>Minotaur`table_select (1 samples, 0.02%)</title><rect x="98.3376%" y="117" width="0.0198%" height="15" fill="rgb(241,220,44)" fg:x="4969" fg:w="1"/><text x="98.5876%" y="127.50"></text></g><g><title>Minotaur`cmov (1 samples, 0.02%)</title><rect x="98.3376%" y="101" width="0.0198%" height="15" fill="rgb(235,28,35)" fg:x="4969" fg:w="1"/><text x="98.5876%" y="111.50"></text></g><g><title>Minotaur`Minotaur::txgenerator::Context::generator_loop (3 samples, 0.06%)</title><rect x="98.3178%" y="213" width="0.0594%" height="15" fill="rgb(210,56,17)" fg:x="4968" fg:w="3"/><text x="98.5678%" y="223.50"></text></g><g><title>Minotaur`std::thread::sleep (1 samples, 0.02%)</title><rect x="98.3574%" y="197" width="0.0198%" height="15" fill="rgb(224,130,29)" fg:x="4970" fg:w="1"/><text x="98.6074%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__semwait_signal (1 samples, 0.02%)</title><rect x="98.3574%" y="181" width="0.0198%" height="15" fill="rgb(235,212,8)" fg:x="4970" fg:w="1"/><text x="98.6074%" y="191.50"></text></g><g><title>Minotaur`__rdl_dealloc (16 samples, 0.32%)</title><rect x="98.3772%" y="213" width="0.3166%" height="15" fill="rgb(223,33,50)" fg:x="4971" fg:w="16"/><text x="98.6272%" y="223.50"></text></g><g><title>Minotaur`__rust_dealloc (4 samples, 0.08%)</title><rect x="98.6938%" y="213" width="0.0792%" height="15" fill="rgb(219,149,13)" fg:x="4987" fg:w="4"/><text x="98.9438%" y="223.50"></text></g><g><title>Minotaur`rand::rngs::thread::thread_rng (1 samples, 0.02%)</title><rect x="98.7730%" y="213" width="0.0198%" height="15" fill="rgb(250,156,29)" fg:x="4991" fg:w="1"/><text x="99.0230%" y="223.50"></text></g><g><title>Minotaur`std::time::SystemTime::now (3 samples, 0.06%)</title><rect x="98.7928%" y="213" width="0.0594%" height="15" fill="rgb(216,193,19)" fg:x="4992" fg:w="3"/><text x="99.0428%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (10 samples, 0.20%)</title><rect x="98.8522%" y="213" width="0.1979%" height="15" fill="rgb(216,135,14)" fg:x="4995" fg:w="10"/><text x="99.1022%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.08%)</title><rect x="99.0501%" y="213" width="0.0792%" height="15" fill="rgb(241,47,5)" fg:x="5005" fg:w="4"/><text x="99.3001%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.02%)</title><rect x="99.1292%" y="213" width="0.0198%" height="15" fill="rgb(233,42,35)" fg:x="5009" fg:w="1"/><text x="99.3792%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (5 samples, 0.10%)</title><rect x="99.1490%" y="213" width="0.0990%" height="15" fill="rgb(231,13,6)" fg:x="5010" fg:w="5"/><text x="99.3990%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (36 samples, 0.71%)</title><rect x="99.2480%" y="213" width="0.7124%" height="15" fill="rgb(207,181,40)" fg:x="5015" fg:w="36"/><text x="99.4980%" y="223.50"></text></g><g><title>all (5,053 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(254,173,49)" fg:x="0" fg:w="5053"/><text x="0.2500%" y="319.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (4,429 samples, 87.65%)</title><rect x="12.3491%" y="293" width="87.6509%" height="15" fill="rgb(221,1,38)" fg:x="624" fg:w="4429"/><text x="12.5991%" y="303.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (4,429 samples, 87.65%)</title><rect x="12.3491%" y="277" width="87.6509%" height="15" fill="rgb(206,124,46)" fg:x="624" fg:w="4429"/><text x="12.5991%" y="287.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>Minotaur`std::sys::unix::thread::Thread::new::thread_start (4,429 samples, 87.65%)</title><rect x="12.3491%" y="261" width="87.6509%" height="15" fill="rgb(249,21,11)" fg:x="624" fg:w="4429"/><text x="12.5991%" y="271.50">Minotaur`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>Minotaur`core::ops::function::FnOnce::call_once{{vtable.shim}} (4,429 samples, 87.65%)</title><rect x="12.3491%" y="245" width="87.6509%" height="15" fill="rgb(222,201,40)" fg:x="624" fg:w="4429"/><text x="12.5991%" y="255.50">Minotaur`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>Minotaur`std::sys_common::backtrace::__rust_begin_short_backtrace (4,429 samples, 87.65%)</title><rect x="12.3491%" y="229" width="87.6509%" height="15" fill="rgb(235,61,29)" fg:x="624" fg:w="4429"/><text x="12.5991%" y="239.50">Minotaur`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (2 samples, 0.04%)</title><rect x="99.9604%" y="213" width="0.0396%" height="15" fill="rgb(219,207,3)" fg:x="5051" fg:w="2"/><text x="100.2104%" y="223.50"></text></g></svg></svg>